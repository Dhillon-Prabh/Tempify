/** Node module provided by Braintree. */
const braintree = require("braintree");
/** Connection to database. */
const db = require('../database/database');

/**
 * Controller for payment using Braintree's api. Payment can be made using
 * a valid credit card.
 * For testing, use credit card number "4111 1111 1111 1111". A payment between
 * 0.01 - 1999.99 will result in a successful payment. A payment between 2000.00
 * 2999.99 will result in a declined payment.
 * Refer to https://developers.braintreepayments.com/ for more details.
 * 
 * @author John Ham
 * @version 1.0
 */

/**
 * Connection to Braintree. Environment is set to sandbox for testing purposes.
 */
const gateway = braintree.connect({
  environment: braintree.Environment.Sandbox,
  merchantId: "rh5zzfb9vpysnhqs",
  publicKey: "mq33w85nnd6jkhd9",
  privateKey: "32bfcfba42f3d1f5edc44ad49fa510f7"
});

/**
 * Passes payment information related to a gig from the database back to the 
 * client, including temp hours worked, temp wage, service fee, gst, and 
 * total amount.
 * 
 * @param req incoming request
 *            gigId
 * @param res response sent back to client
 *            temp_wage, temp_hours, service_fee, gst, total_amount
 * @param next used if another serverside controller is called
 */
exports.getGigDetails = (req, res, next) => {
  var gig = req.body.gigId;
  db((err, con) => {
    if(err){
      throw err;
    }
    const query = "SELECT temp_hours, temp_wage, service_fee, gst, total_amount"
                  + " FROM `bookings` WHERE id = ?";
    con.query(query, [gig], (err, result, fields) => {     
      if(!result.length) {
        return res.status(401).send(
          { error : "No information on the database related to this gig.",}
        );
      }
      let gigSelected = result[0];
      res
        .status(200)
        .json({
          wages: gigSelected.temp_wage,
          hours: gigSelected.temp_hours,
          serviceFee: gigSelected.service_fee,
          gst: gigSelected.gst,
          total: gigSelected.total_amount
          }
        )
      con.release();
    });
  });
}

/**
 * Passes a token generated by Braintree's api to the client.
 * 
 * @param req incoming request
 * @param res response sent back to client
 *            token generated by Braintree
 * @param next used if another serverside controller is called
 */
exports.getToken = (req, res, next) => {
    gateway.clientToken.generate({ 
    }, function (err, response) {
    res.send(response);
  });
};

/**
 * Passes a nonce received from the client and uses it to make a transaction
 * request to Braintree. 
 * 
 * @param req incoming request
 *            nonce, payment amount
 * @param res response sent back to client
 * @param next used if another serverside controller is called
 */
exports.checkout = (req, res, next) => {
  var nonceFromTheClient = req.body.transaction.nonce;
  gateway.transaction.sale({
    amount: req.body.payAmount,
    paymentMethodNonce: nonceFromTheClient,
    options: {
      submitForSettlement: true
    }
  }, function(error, result) {
    if (result) {
      if (result.success) {  // Transaction successful.
        db((err, con) => {
          if(err){
            throw err;
          }
          // update database for successful payment
          var query = 'UPDATE bookings SET dental_status = "COMPLETE" WHERE id = ?;';
            var gig = req.body.gigId;
            con.query(query, [gig], (err, result, fields) => {
            if(!err) { 
              con.release();
            } else {
              res.status(401).send('Error Occurred');
              con.release();
            }
          });
        })
      }
      res.send(result);
      if(result.success) {
        next();
      }
    } else {
      res.status(500).send(error);
    }
  });
};